@using PlexRequestsHosted.Shared.DTOs
@using PlexRequestsHosted.Shared.Enums

<div class="media-tile @(_isExpanded ? "expanded" : "")" 
     @onmouseenter="OnMouseEnter" 
     @onmouseleave="OnMouseLeave">
    
    <div class="tile-poster">
        @if (!string.IsNullOrEmpty(Media.PosterUrl))
        {
            <img src="@Media.PosterUrl" alt="@Media.Title" loading="lazy" />
        }
        else
        {
            <div class="poster-placeholder">
                <MudIcon Icon="@GetMediaIcon()" Size="Size.Large" />
            </div>
        }
        
        @if (Media.IsAvailable)
        {
            <div class="status-badge available">
                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small" />
            </div>
        }
        else if (Media.RequestStatus == RequestStatus.Pending)
        {
            <div class="status-badge pending">
                <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" />
            </div>
        }
        else if (Media.RequestStatus == RequestStatus.Approved)
        {
            <div class="status-badge approved">
                <MudIcon Icon="@Icons.Material.Filled.Done" Size="Size.Small" />
            </div>
        }
        
        @if (Media.MediaType == MediaType.TvShow && Media.TotalSeasons > 0)
        {
            <div class="season-info">
                <span>S@Media.TotalSeasons</span>
            </div>
        }
    </div>
    
    @if (_isExpanded)
    {
        <div class="tile-expanded-content">
            <div class="expanded-backdrop">
                @if (!string.IsNullOrEmpty(Media.BackdropUrl))
                {
                    <img src="@Media.BackdropUrl" alt="" />
                    <div class="backdrop-overlay"></div>
                }
            </div>
            
            <div class="expanded-info">
                <h3 class="expanded-title">@Media.Title</h3>
                
                <div class="expanded-meta">
                    @if (Media.Year.HasValue)
                    {
                        <span>@Media.Year</span>
                    }
                    @if (Media.Rating.HasValue)
                    {
                        <span class="rating">
                            <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small" />
                            @Media.Rating.Value.ToString("0.0")
                        </span>
                    }
                    @if (Media.Runtime.HasValue)
                    {
                        <span>@FormatRuntime(Media.Runtime.Value)</span>
                    }
                </div>
                
                @if (!string.IsNullOrEmpty(Media.Overview))
                {
                    <p class="expanded-overview">@TruncateText(Media.Overview, 150)</p>
                }
                
                @if (Media.Genres?.Any() == true)
                {
                    <div class="expanded-genres">
                        @foreach (String genre in Media.Genres.Take(3))
                        {
                            <span class="genre-chip">@genre</span>
                        }
                    </div>
                }
                
                <div class="expanded-actions">
                    @if (Media.IsAvailable)
                    {
                        <button class="action-button primary" @onclick:stopPropagation="true" @onclick="HandlePlay">
                            <MudIcon Icon="@Icons.Material.Filled.PlayArrow" />
                            Play
                        </button>
                    }
                    else if (Media.RequestStatus == RequestStatus.None)
                    {
                        <button class="action-button primary" @onclick:stopPropagation="true" @onclick="HandleRequest">
                            <MudIcon Icon="@Icons.Material.Filled.Add" />
                            Request
                        </button>
                    }
                    else
                    {
                        <button class="action-button secondary" disabled>
                            @GetStatusText()
                        </button>
                    }
                    
                    <button class="action-button icon" @onclick:stopPropagation="true" @onclick="ToggleWatchlist">
                        <MudIcon Icon="@(_inWatchlist ? Icons.Material.Filled.Check : Icons.Material.Filled.Add)" />
                    </button>
                    
                    <button class="action-button icon" @onclick:stopPropagation="true" @onclick="ShowMore">
                        <MudIcon Icon="@Icons.Material.Filled.ExpandMore" />
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired] public MediaCardDto Media { get; set; } = default!;
    [Parameter] public EventCallback<MediaCardDto> OnRequest { get; set; }
    [Parameter] public EventCallback<MediaCardDto> OnPlay { get; set; }
    [Parameter] public EventCallback<MediaCardDto> OnToggleWatchlist { get; set; }
    
    private Boolean _isExpanded = false;
    private Boolean _inWatchlist = false;
    private System.Timers.Timer? _hoverTimer;

    private void OnMouseEnter()
    {
        _hoverTimer?.Stop();
        _hoverTimer = new System.Timers.Timer(500);
        _hoverTimer.Elapsed += (s, e) =>
        {
            _isExpanded = true;
            _hoverTimer?.Stop();
            InvokeAsync(StateHasChanged);
        };
        _hoverTimer.Start();
    }

    private void OnMouseLeave()
    {
        _hoverTimer?.Stop();
        _isExpanded = false;
    }

    private async Task HandleRequest()
    {
        if (OnRequest.HasDelegate)
            await OnRequest.InvokeAsync(Media);
    }

    private async Task HandlePlay()
    {
        if (OnPlay.HasDelegate)
            await OnPlay.InvokeAsync(Media);
    }

    private async Task ToggleWatchlist()
    {
        _inWatchlist = !_inWatchlist;
        if (OnToggleWatchlist.HasDelegate)
            await OnToggleWatchlist.InvokeAsync(Media);
    }

    private void ShowMore()
    {
        // This would open the detail modal
    }

    private String GetMediaIcon() => Media.MediaType switch
    {
        MediaType.Movie => Icons.Material.Filled.Movie,
        MediaType.TvShow => Icons.Material.Filled.Tv,
        _ => Icons.Material.Filled.VideoLibrary
    };

    private String GetStatusText() => Media.RequestStatus switch
    {
        RequestStatus.Pending => "Pending",
        RequestStatus.Approved => "Approved",
        _ => "Requested"
    };

    private String FormatRuntime(Int32 minutes)
    {
        if (minutes < 60) return $"{minutes}m";
        return $"{minutes / 60}h {minutes % 60}m";
    }

    private String TruncateText(String text, Int32 maxLength)
    {
        if (text.Length <= maxLength) return text;
        return text.Substring(0, maxLength) + "...";
    }

    public void Dispose()
    {
        _hoverTimer?.Dispose();
    }
}
