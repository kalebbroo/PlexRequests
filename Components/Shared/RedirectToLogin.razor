@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]

@inject NavigationManager Navigation

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;

        var current = new Uri(Navigation.Uri);
        var path = current.AbsolutePath ?? string.Empty;
        // Avoid redirecting if we're already on a safe/anonymous route
        if (path.Equals("/", StringComparison.OrdinalIgnoreCase)
            || path.StartsWith("/login", StringComparison.OrdinalIgnoreCase)
            || path.Contains("/auth/callback", StringComparison.OrdinalIgnoreCase))
        {
            return;
        }

        // Give auth state a brief moment to initialize
        await Task.Delay(150);
        var isAuth = false;
        try
        {
            if (AuthenticationStateTask is not null)
            {
                var state = await AuthenticationStateTask;
                isAuth = state.User?.Identity?.IsAuthenticated == true;
            }
        }
        catch { /* ignore */ }

        if (isAuth)
        {
            // Already authenticated; do not redirect to login
            return;
        }

        // Ensure we never set a returnUrl that points back to login to prevent loops
        var full = Navigation.Uri;
        if (path.StartsWith("/login", StringComparison.OrdinalIgnoreCase))
        {
            full = "/browse"; // safe default
        }
        var returnUrl = Uri.EscapeDataString(full);
        Navigation.NavigateTo($"/login?returnUrl={returnUrl}", false);
    }
}

<div class="m-4">
    Redirecting to sign in...
</div>
