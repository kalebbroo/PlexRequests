@page "/media/{type}/{id:int}"
@inject PlexRequestsHosted.Services.Abstractions.IPlexApiService PlexApiService
@inject PlexRequestsHosted.Services.Abstractions.IMediaRequestService MediaRequestService
@inject PlexRequestsHosted.Services.Abstractions.IToastService ToastService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>@(_media?.Title ?? "Loading...") - Plex Requests</PageTitle>

@if (_loading)
{
    <div class="loading-skeleton">
        <div class="skeleton-hero"></div>
        <div class="skeleton-content">
            <MudContainer MaxWidth="MaxWidth.Large">
                <MudSkeleton SkeletonType="SkeletonType.Text" Width="300px" Height="60px" />
                <MudSkeleton SkeletonType="SkeletonType.Text" Width="500px" Height="30px" />
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="100px" />
            </MudContainer>
        </div>
    </div>
}
else if (_media == null)
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="py-8">
        <div style="text-align: center; padding: 4rem 0;">
            <MudIcon Icon="@Icons.Material.Filled.ErrorOutline" Style="font-size: 4rem;" />
            <MudText Typo="Typo.h4" Class="mt-4">Content Not Found</MudText>
            <MudText Typo="Typo.body1" Color="Color.Tertiary">
                This title isn't available right now.
            </MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/" Class="mt-4">
                Browse Home
            </MudButton>
        </div>
    </MudContainer>
}
else
{
    <div class="details-container">
        <!-- Hero Section -->
        <section class="details-hero">
            <div class="hero-background">
                @if (!string.IsNullOrEmpty(_media.BackdropUrl))
                {
                    <img src="@_media.BackdropUrl" alt="" class="backdrop-image" />
                }
                <div class="hero-gradient"></div>
            </div>
            
            <div class="hero-content">
                <MudContainer MaxWidth="MaxWidth.Large">
                    <div class="hero-grid">
                        <div class="poster-section">
                            @if (!string.IsNullOrEmpty(_media.PosterUrl))
                            {
                                <img src="@_media.PosterUrl" alt="@_media.Title" class="poster" />
                            }
                            <div class="poster-actions mobile-only">
                                @if (_media.IsAvailable)
                                {
                                    <button class="action-btn primary full" @onclick="PlayNow">
                                        <MudIcon Icon="@Icons.Material.Filled.PlayArrow" />
                                        <span>Play</span>
                                    </button>
                                }
                                else if (_media.RequestStatus == PlexRequestsHosted.Shared.Enums.RequestStatus.None)
                                {
                                    <button class="action-btn primary full" @onclick="RequestMedia">
                                        <MudIcon Icon="@Icons.Material.Filled.Add" />
                                        <span>Request</span>
                                    </button>
                                }
                                else
                                {
                                    <button class="action-btn secondary full" disabled>
                                        <MudIcon Icon="@Icons.Material.Filled.Schedule" />
                                        <span>@GetRequestStatusText()</span>
                                    </button>
                                }
                            </div>
                        </div>
                        
                        <div class="info-section">
                            <h1 class="title">@_media.Title</h1>
                            
                            @if (!string.IsNullOrEmpty(_media.Tagline))
                            {
                                <p class="tagline">@_media.Tagline</p>
                            }
                            
                            <div class="metadata">
                                @if (_media.Rating.HasValue)
                                {
                                    <div class="meta-item rating">
                                        <MudIcon Icon="@Icons.Material.Filled.Star" />
                                        <span>@_media.Rating.Value.ToString("0.0")</span>
                                    </div>
                                }
                                @if (_media.Year.HasValue)
                                {
                                    <span class="meta-item">@_media.Year</span>
                                }
                                @if (_media.MediaType == PlexRequestsHosted.Shared.Enums.MediaType.TvShow && _media.TotalSeasons > 0)
                                {
                                    <span class="meta-item">@_media.TotalSeasons Seasons</span>
                                }
                                @if (_media.Runtime.HasValue)
                                {
                                    <span class="meta-item">@FormatRuntime(_media.Runtime.Value)</span>
                                }
                                @if (!string.IsNullOrEmpty(_media.ContentRating))
                                {
                                    <span class="meta-badge">@_media.ContentRating</span>
                                }
                                @if (!string.IsNullOrEmpty(_media.Quality))
                                {
                                    <span class="quality-badge @GetQualityClass()">@_media.Quality</span>
                                }
                            </div>
                            
                            <div class="actions desktop-only">
                                @if (_media.IsAvailable)
                                {
                                    <button class="action-btn primary large" @onclick="PlayNow">
                                        <MudIcon Icon="@Icons.Material.Filled.PlayArrow" />
                                        <span>Play</span>
                                    </button>
                                }
                                else if (_media.RequestStatus == PlexRequestsHosted.Shared.Enums.RequestStatus.None)
                                {
                                    <button class="action-btn primary large" @onclick="RequestMedia">
                                        <MudIcon Icon="@Icons.Material.Filled.Add" />
                                        <span>Request</span>
                                    </button>
                                }
                                else
                                {
                                    <button class="action-btn secondary large" disabled>
                                        <MudIcon Icon="@Icons.Material.Filled.Schedule" />
                                        <span>@GetRequestStatusText()</span>
                                    </button>
                                }
                                
                                <button class="action-btn secondary large" @onclick="ToggleWatchlist">
                                    <MudIcon Icon="@(_inWatchlist ? Icons.Material.Filled.Check : Icons.Material.Filled.Add)" />
                                    <span>@(_inWatchlist ? "In My List" : "My List")</span>
                                </button>
                                
                                @if (!string.IsNullOrEmpty(_media.TrailerUrl))
                                {
                                    <button class="action-btn secondary" @onclick="PlayTrailer">
                                        <MudIcon Icon="@Icons.Material.Filled.PlayCircleOutline" />
                                        <span>Trailer</span>
                                    </button>
                                }
                            </div>
                            
                            @if (!string.IsNullOrEmpty(_media.Overview))
                            {
                                <div class="overview">
                                    <p>@_media.Overview</p>
                                </div>
                            }
                            
                            @if (_media.Genres?.Any() == true)
                            {
                                <div class="genres">
                                    <span class="label">Genres:</span>
                                    @foreach (String genre in _media.Genres)
                                    {
                                        <a href="/browse?genre=@genre" class="genre-link">@genre</a>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </MudContainer>
            </div>
        </section>

        <!-- Details Tabs -->
        <section class="details-tabs">
            <MudContainer MaxWidth="MaxWidth.Large">
                <MudTabs Elevation="0" Rounded="false" Centered="false" Color="Color.Primary" Class="custom-tabs">
                    @if (_media.MediaType == PlexRequestsHosted.Shared.Enums.MediaType.TvShow)
                    {
                        <MudTabPanel Text="Episodes">
                            <div class="episodes-section">
                                @if (_media.Seasons?.Any() == true)
                                {
                                    <MudSelect T="PlexRequestsHosted.Shared.DTOs.SeasonDto" 
                                               @bind-Value="_selectedSeason" 
                                               Label="Season" 
                                               Variant="Variant.Outlined"
                                               Class="season-select">
                                        @foreach (PlexRequestsHosted.Shared.DTOs.SeasonDto season in _media.Seasons)
                                        {
                                            <MudSelectItem Value="season">
                                                Season @season.SeasonNumber
                                                @if (season.IsAvailable)
                                                {
                                                    <MudChip T="string" Size="Size.Small" Color="Color.Success">Available</MudChip>
                                                }
                                            </MudSelectItem>
                                        }
                                    </MudSelect>
                                    
                                    @if (_selectedSeason != null)
                                    {
                                        <div class="season-info">
                                            <MudText Typo="Typo.h6">Season @_selectedSeason.SeasonNumber</MudText>
                                            <MudText Typo="Typo.body2">
                                                @_selectedSeason.EpisodeCount Episodes
                                                @if (_selectedSeason.IsAvailable)
                                                {
                                                    <span> • @_selectedSeason.AvailableEpisodes Available</span>
                                                }
                                            </MudText>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <MudText Typo="Typo.body1">Episode information not available</MudText>
                                }
                            </div>
                        </MudTabPanel>
                    }
                    
                    <MudTabPanel Text="More Details">
                        <div class="more-details-grid">
                            @if (_media.Cast?.Any() == true)
                            {
                                <div class="detail-group">
                                    <h3>Cast</h3>
                                    <p>@string.Join(", ", _media.Cast.Take(10))</p>
                                </div>
                            }
                            @if (_media.Directors?.Any() == true)
                            {
                                <div class="detail-group">
                                    <h3>Directors</h3>
                                    <p>@string.Join(", ", _media.Directors)</p>
                                </div>
                            }
                            @if (_media.Writers?.Any() == true)
                            {
                                <div class="detail-group">
                                    <h3>Writers</h3>
                                    <p>@string.Join(", ", _media.Writers)</p>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(_media.Studio) || !string.IsNullOrEmpty(_media.Network))
                            {
                                <div class="detail-group">
                                    <h3>Studio</h3>
                                    <p>@(_media.Studio ?? _media.Network)</p>
                                </div>
                            }
                            @if (_media.ReleaseDate.HasValue || _media.FirstAired.HasValue)
                            {
                                <div class="detail-group">
                                    <h3>Release Date</h3>
                                    <p>@((_media.ReleaseDate ?? _media.FirstAired)?.ToString("MMMM d, yyyy"))</p>
                                </div>
                            }
                            @if (_media.Languages?.Any() == true)
                            {
                                <div class="detail-group">
                                    <h3>Languages</h3>
                                    <p>@string.Join(", ", _media.Languages)</p>
                                </div>
                            }
                        </div>
                    </MudTabPanel>
                    
                    <MudTabPanel Text="Similar">
                        <div class="similar-section">
                            @if (_similarMedia?.Any() == true)
                            {
                                <div class="similar-grid">
                                    @foreach (PlexRequestsHosted.Shared.DTOs.MediaCardDto similar in _similarMedia)
                                    {
                                        <div class="similar-item" @onclick="() => NavigateToMedia(similar)">
                                            <MediaTile Media="similar" />
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <MudText Typo="Typo.body1">No similar titles available</MudText>
                            }
                        </div>
                    </MudTabPanel>
                </MudTabs>
            </MudContainer>
        </section>
    </div>
}

@code {
    [Parameter] public String? Type { get; set; }
    [Parameter] public Int32 Id { get; set; }

    private PlexRequestsHosted.Shared.DTOs.MediaDetailDto? _media;
    private List<PlexRequestsHosted.Shared.DTOs.MediaCardDto>? _similarMedia;
    private PlexRequestsHosted.Shared.DTOs.SeasonDto? _selectedSeason;
    private Boolean _loading = true;
    private Boolean _inWatchlist = false;

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;
        StateHasChanged();

        try
        {
            PlexRequestsHosted.Shared.Enums.MediaType mediaType = ParseType(Type);
            _media = await PlexApiService.GetMediaDetailsAsync(Id, mediaType);
            
            if (_media != null)
            {
                _inWatchlist = await MediaRequestService.IsInWatchlistAsync(_media.Id);
                
                // Load similar content
                _similarMedia = await PlexApiService.SearchMediaAsync("", mediaType);
                _similarMedia = _similarMedia?.Where(m => m.Id != _media.Id).Take(12).ToList();
                
                // Set default selected season
                if (_media.Seasons?.Any() == true)
                {
                    _selectedSeason = _media.Seasons.First();
                }
            }
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private PlexRequestsHosted.Shared.Enums.MediaType ParseType(String? t)
        => string.Equals(t, "tvshow", StringComparison.OrdinalIgnoreCase) ? PlexRequestsHosted.Shared.Enums.MediaType.TvShow
         : string.Equals(t, "movie", StringComparison.OrdinalIgnoreCase) ? PlexRequestsHosted.Shared.Enums.MediaType.Movie
         : PlexRequestsHosted.Shared.Enums.MediaType.Movie;

    private async Task RequestMedia()
    {
        if (_media == null) return;
        
        PlexRequestsHosted.Shared.DTOs.MediaRequestResult result = await MediaRequestService.RequestMediaAsync(_media.Id, _media.MediaType);
        if (result.Success)
        {
            _media.RequestStatus = PlexRequestsHosted.Shared.Enums.RequestStatus.Pending;
            await ToastService.ShowSuccessAsync($"{_media.Title} has been requested!");
            StateHasChanged();
        }
        else
        {
            await ToastService.ShowErrorAsync(result.ErrorMessage ?? "Failed to request");
        }
    }

    private void PlayNow()
    {
        if (!string.IsNullOrEmpty(_media?.PlexUrl))
            Navigation.NavigateTo(_media.PlexUrl, true);
    }

    private void PlayTrailer()
    {
        if (!string.IsNullOrEmpty(_media?.TrailerUrl))
            Navigation.NavigateTo(_media.TrailerUrl, true);
    }

    private async Task ToggleWatchlist()
    {
        if (_media == null) return;
        
        Boolean success = _inWatchlist
            ? await MediaRequestService.RemoveFromWatchlistAsync(_media.Id)
            : await MediaRequestService.AddToWatchlistAsync(_media.Id);
            
        if (success)
        {
            _inWatchlist = !_inWatchlist;
            String message = _inWatchlist ? "Added to My List" : "Removed from My List";
            await ToastService.ShowInfoAsync(message);
        }
    }

    private void NavigateToMedia(PlexRequestsHosted.Shared.DTOs.MediaCardDto media)
    {
        Navigation.NavigateTo($"/media/{media.MediaType.ToString().ToLower()}/{media.Id}");
    }

    private String GetRequestStatusText() => _media?.RequestStatus switch
    {
        PlexRequestsHosted.Shared.Enums.RequestStatus.Pending => "Pending",
        PlexRequestsHosted.Shared.Enums.RequestStatus.Approved => "Approved",
        _ => "Requested"
    };

    private String GetQualityClass() => _media?.Quality?.ToUpper() switch
    {
        "4K" or "UHD" => "quality-4k",
        "1080P" or "FHD" => "quality-hd",
        _ => ""
    };

    private String FormatRuntime(Int32 minutes)
    {
        if (minutes < 60) return $"{minutes}m";
        Int32 hours = minutes / 60;
        Int32 mins = minutes % 60;
        return mins > 0 ? $"{hours}h {mins}m" : $"{hours}h";
    }
}
