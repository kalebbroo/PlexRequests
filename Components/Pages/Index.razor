@page "/"
@inject PlexRequestsHosted.Services.Abstractions.IMediaRequestService MediaRequestService
@using PlexRequestsHosted.Shared.DTOs
@using PlexRequestsHosted.Shared.Enums
@using PlexRequestsHosted.Utils
@inject PlexRequestsHosted.Services.Abstractions.IPlexApiService PlexApiService
@inject PlexRequestsHosted.Services.Abstractions.IToastService ToastService
@inject NavigationManager Navigation

<PageTitle>Home - Plex Requests</PageTitle>

<div class="homepage">
    <AuthorizeView>
        <Authorized>
            @* Full homepage for logged-in users *@
            @if (_heroMedia != null)
            {
                <section class="hero-billboard">
                    <div class="billboard-background">
                        @if (!string.IsNullOrEmpty(_heroMedia.BackdropUrl))
                        {
                            <img src="@_heroMedia.BackdropUrl" alt="" class="billboard-image" />
                        }
                        <div class="billboard-gradient"></div>
                        <div class="billboard-fade"></div>
                    </div>

                    <div class="billboard-content">
                        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="container-padding">
                            <div class="billboard-info">
                                <h1 class="billboard-title">@_heroMedia.Title</h1>

                                @if (!string.IsNullOrEmpty(_heroMedia.Tagline))
                                {
                                    <p class="billboard-tagline">@_heroMedia.Tagline</p>
                                }

                                <p class="billboard-description">@_heroMedia.Overview</p>

                                <div class="billboard-metadata">
                                    @if (_heroMedia.Rating.HasValue)
                                    {
                                        <span class="metadata-item">
                                            <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small" />
                                            @_heroMedia.Rating.Value.ToString("0.0")
                                        </span>
                                    }
                                    @if (_heroMedia.Year.HasValue)
                                    {
                                        <span class="metadata-item">@_heroMedia.Year</span>
                                    }
                                    @if (_heroMedia.ContentRating != null)
                                    {
                                        <span class="metadata-badge">@_heroMedia.ContentRating</span>
                                    }
                                    @if (_heroMedia.Runtime.HasValue)
                                    {
                                        <span class="metadata-item">@FormatRuntime(_heroMedia.Runtime.Value)</span>
                                    }
                                </div>

                                <div class="billboard-actions">
                                    @if (_heroMedia.IsAvailable)
                                    {
                                        <MudButton Variant="Variant.Filled"
                                                   Color="Color.Surface"
                                                   Size="Size.Large"
                                                   StartIcon="@Icons.Material.Filled.PlayArrow"
                                                   Class="btn-primary"
                                                   OnClick="() => PlayMedia(_heroMedia)">
                                            Play
                                        </MudButton>
                                    }
                                    else
                                    {
                                        <MudButton Variant="Variant.Filled"
                                                   Color="Color.Primary"
                                                   Size="Size.Large"
                                                   StartIcon="@Icons.Material.Filled.Add"
                                                   Class="btn-primary"
                                                   OnClick="() => RequestMedia(_heroMedia)">
                                            Request
                                        </MudButton>
                                    }
                                    <MudButton Variant="Variant.Outlined"
                                               Color="Color.Surface"
                                               Size="Size.Large"
                                               StartIcon="@Icons.Material.Filled.Info"
                                               Class="btn-secondary"
                                               OnClick="() => ShowDetails(_heroMedia)">
                                        More Info
                                    </MudButton>
                                </div>
                            </div>
                        </MudContainer>
                    </div>
                </section>
            }

            <div class="content-sections">
                <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="container-padding">
                    @if (_continueWatching?.Any() == true)
                    {
                        <div class="section-spacing">
                            <MediaCarousel Title="Continue Watching"
                                           Items="_continueWatching"
                                           ShowProgress="true"
                                           OnItemClick="ShowDetails"
                                           OnPlayClick="PlayMedia"
                                           OnRequestClick="RequestMedia" />
                        </div>
                    }

                    @if (_trending?.Any() == true)
                    {
                        <div class="section-spacing">
                            <MediaCarousel Title="Trending Now"
                                           Items="_trending"
                                           Subtitle="Most requested this week"
                                           OnItemClick="ShowDetails"
                                           OnPlayClick="PlayMedia"
                                           OnRequestClick="RequestMedia" />
                        </div>
                    }

                    @if (_newReleases?.Any() == true)
                    {
                        <div class="section-spacing">
                            <MediaCarousel Title="New Releases"
                                           Items="_newReleases"
                                           OnItemClick="ShowDetails"
                                           OnPlayClick="PlayMedia"
                                           OnRequestClick="RequestMedia" />
                        </div>
                    }

                    @if (_topRatedMovies?.Any() == true)
                    {
                        <div class="section-spacing">
                            <MediaCarousel Title="Top Rated Movies"
                                           Items="_topRatedMovies"
                                           ShowRating="true"
                                           OnItemClick="ShowDetails"
                                           OnPlayClick="PlayMedia"
                                           OnRequestClick="RequestMedia" />
                        </div>
                    }

                    @if (_popularTvShows?.Any() == true)
                    {
                        <div class="section-spacing">
                            <MediaCarousel Title="Popular TV Shows"
                                           Items="_popularTvShows"
                                           OnItemClick="ShowDetails"
                                           OnPlayClick="PlayMedia"
                                           OnRequestClick="RequestMedia" />
                        </div>
                    }

                    @if (_myList?.Any() == true)
                    {
                        <div class="section-spacing">
                            <MediaCarousel Title="My List"
                                           Items="_myList"
                                           OnItemClick="ShowDetails"
                                           OnPlayClick="PlayMedia"
                                           OnRequestClick="RequestMedia" />
                        </div>
                    }

                    @foreach (String genre in _genreRows.Keys)
                    {
                        @if (_genreRows[genre]?.Any() == true)
                        {
                            <div class="section-spacing">
                                <MediaCarousel Title="@($"Because You Like {genre}")"
                                               Items="_genreRows[genre]"
                                               OnItemClick="ShowDetails"
                                               OnPlayClick="PlayMedia"
                                               OnRequestClick="RequestMedia" />
                            </div>
                        }
                    }

                    @if (_recentlyAdded?.Any() == true)
                    {
                        <div class="section-spacing">
                            <MediaCarousel Title="Recently Added to Plex"
                                           Items="_recentlyAdded"
                                           ShowBadge="true"
                                           BadgeText="NEW"
                                           OnItemClick="ShowDetails"
                                           OnPlayClick="PlayMedia"
                                           OnRequestClick="RequestMedia" />
                        </div>
                    }
                </MudContainer>
            </div>
        </Authorized>
        <NotAuthorized>
            @* Landing page for non-logged-in users *@
            <section class="landing-hero">
                <div class="landing-background">
                    <div class="landing-gradient"></div>
                </div>
                <div class="landing-content">
                    <MudContainer MaxWidth="MaxWidth.Large" Class="container-padding">
                        <div class="landing-text">
                            <h1 class="landing-title">Discover Your Next Favorite</h1>
                            <p class="landing-subtitle">
                                Request movies and TV shows from your Plex server. Browse trending content,
                                create your personal watchlist, and get notified when your requests are available.
                            </p>
                            <div class="landing-actions">
                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           Size="Size.Large"
                                           StartIcon="@Icons.Material.Filled.PlayArrow"
                                           Href="/login"
                                           Class="landing-btn">
                                    Sign In with Plex
                                </MudButton>
                                <MudButton Variant="Variant.Outlined"
                                           Color="Color.Surface"
                                           Size="Size.Large"
                                           Href="/browse/movie"
                                           Class="landing-btn-secondary">
                                    Browse Content
                                </MudButton>
                            </div>
                        </div>
                    </MudContainer>
                </div>
            </section>

            @* Demo content section for non-logged-in users *@
            <div class="demo-content">
                <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="container-padding">
                    @if (_trending?.Any() == true)
                    {
                        <div class="section-spacing">
                            <MediaCarousel Title="Trending Now"
                                           Items="_trending.Take(10).ToList()"
                                           Subtitle="Popular content this week"
                                           OnItemClick="ShowDetails"
                                           OnPlayClick="() => {}"
                                           OnRequestClick="() => {}" />
                        </div>
                    }

                    @if (_topRatedMovies?.Any() == true)
                    {
                        <div class="section-spacing">
                            <MediaCarousel Title="Top Rated Movies"
                                           Items="_topRatedMovies.Take(10).ToList()"
                                           ShowRating="true"
                                           OnItemClick="ShowDetails"
                                           OnPlayClick="() => {}"
                                           OnRequestClick="() => {}" />
                        </div>
                    }

                    <div class="demo-notice">
                        <MudAlert Severity="Severity.Info" Class="demo-alert">
                            <MudText Typo="Typo.body1">
                                <strong>Sign in with Plex</strong> to request content, create watchlists, and access your personal recommendations.
                            </MudText>
                        </MudAlert>
                    </div>
                </MudContainer>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private PlexRequestsHosted.Shared.DTOs.MediaDetailDto? _heroMedia;
    private List<PlexRequestsHosted.Shared.DTOs.MediaCardDto>? _continueWatching;
    private List<PlexRequestsHosted.Shared.DTOs.MediaCardDto>? _trending;
    private List<PlexRequestsHosted.Shared.DTOs.MediaCardDto>? _newReleases;
    private List<PlexRequestsHosted.Shared.DTOs.MediaCardDto>? _topRatedMovies;
    private List<PlexRequestsHosted.Shared.DTOs.MediaCardDto>? _popularTvShows;
    private List<PlexRequestsHosted.Shared.DTOs.MediaCardDto>? _myList;
    private List<PlexRequestsHosted.Shared.DTOs.MediaCardDto>? _recentlyAdded;
    private Dictionary<String, List<PlexRequestsHosted.Shared.DTOs.MediaCardDto>> _genreRows = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        // TODO: Implement actual Plex API integration for retrieving recently added media from Plex server
        // Currently using mock data - needs backend service to connect to Plex API
        Logs.Info("Loading dashboard data - Plex API integration pending");

        // Parallel load all sections for better performance
        Task<List<PlexRequestsHosted.Shared.DTOs.MediaCardDto>>[] tasks = new[]
        {
            PlexApiService.GetRecentlyAddedAsync(20), // TODO: Connect to Plex API endpoint
            PlexApiService.SearchMediaAsync("", null), // TODO: Implement TMDB API for trending media lookup
            MediaRequestService.GetWatchlistAsync(), // TODO: Integrate with user watchlist database
            PlexApiService.GetLibraryContentAsync(PlexRequestsHosted.Shared.Enums.MediaType.Movie, 1, 20), // TODO: Plex library sync
            PlexApiService.GetLibraryContentAsync(PlexRequestsHosted.Shared.Enums.MediaType.TvShow, 1, 20) // TODO: Plex library sync
        };

        List<PlexRequestsHosted.Shared.DTOs.MediaCardDto>[] results = await Task.WhenAll(tasks);

        _recentlyAdded = results[0];
        _trending = results[1]?.Take(20).ToList();
        _myList = results[2];
        _topRatedMovies = results[3]?.Where(m => m.Rating > 8).OrderByDescending(m => m.Rating).Take(20).ToList();
        _popularTvShows = results[4]?.Take(20).ToList();

        // Simulate other categories
        _newReleases = _trending?.Where(m => m.Year >= DateTime.Now.Year - 1).Take(20).ToList();
        _continueWatching = _recentlyAdded?.Where(m => m.IsAvailable).Take(10).ToList();

        // Group by genre for personalized rows
        if (_trending != null)
        {
            Dictionary<String, List<PlexRequestsHosted.Shared.DTOs.MediaCardDto>> genreGroups = _trending
                .Where(m => m.Genres?.Any() == true)
                .SelectMany(m => m.Genres.Select(g => new { Genre = g, Media = m }))
                .GroupBy(x => x.Genre)
                .ToDictionary(g => g.Key, g => g.Select(x => x.Media).Distinct().Take(20).ToList());

            _genreRows = genreGroups.Take(3).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
        }

        // Set hero media
        if (_trending?.Any() == true)
        {
            PlexRequestsHosted.Shared.DTOs.MediaCardDto firstItem = _trending.First();
            _heroMedia = await PlexApiService.GetMediaDetailsAsync(firstItem.Id, firstItem.MediaType); // TODO: TMDB API details lookup
            _heroMedia ??= new PlexRequestsHosted.Shared.DTOs.MediaDetailDto
            {
                Id = firstItem.Id,
                Title = firstItem.Title,
                Overview = firstItem.Overview,
                BackdropUrl = firstItem.BackdropUrl,
                IsAvailable = firstItem.IsAvailable,
                MediaType = firstItem.MediaType,
                Rating = firstItem.Rating,
                Year = firstItem.Year,
                Runtime = firstItem.Runtime,
                Genres = firstItem.Genres
            };
        }

        Logs.Info($"Dashboard data loaded: {_trending?.Count ?? 0} trending items, {_recentlyAdded?.Count ?? 0} recently added");
    }

    private void ShowDetails(PlexRequestsHosted.Shared.DTOs.MediaCardDto media)
    {
        Navigation.NavigateTo($"/media/{media.MediaType.ToString().ToLower()}/{media.Id}");
    }

    private async Task RequestMedia(PlexRequestsHosted.Shared.DTOs.MediaCardDto media)
    {
        PlexRequestsHosted.Shared.DTOs.MediaRequestResult result = await MediaRequestService.RequestMediaAsync(media.Id, media.MediaType);
        if (result.Success)
        {
            await ToastService.ShowSuccessAsync($"{media.Title} has been requested!");
            media.RequestStatus = PlexRequestsHosted.Shared.Enums.RequestStatus.Pending;
        }
        else
        {
            await ToastService.ShowErrorAsync(result.ErrorMessage ?? "Failed to request media");
        }
    }

    private void PlayMedia(PlexRequestsHosted.Shared.DTOs.MediaCardDto media)
    {
        if (!string.IsNullOrEmpty(media.PlexUrl))
            Navigation.NavigateTo(media.PlexUrl, true);
    }

    private String FormatRuntime(Int32 minutes)
    {
        if (minutes < 60)
            return $"{minutes}m";
        Int32 hours = minutes / 60;
        Int32 mins = minutes % 60;
        return mins > 0 ? $"{hours}h {mins}m" : $"{hours}h";
    }
}
