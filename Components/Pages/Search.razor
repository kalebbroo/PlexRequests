@page "/search"
@inject PlexRequestsHosted.Services.Abstractions.IPlexApiService PlexApiService
@inject PlexRequestsHosted.Services.Abstractions.IMediaRequestService MediaRequestService
@inject PlexRequestsHosted.Services.Abstractions.IToastService ToastService
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Search - Plex Requests</PageTitle>

<div class="search-page">
    <div class="search-header">
        <MudContainer MaxWidth="MaxWidth.Large">
            <div class="search-input-container">
                <MudIcon Icon="@Icons.Material.Filled.Search" Class="search-icon" />
                <input type="text" 
                       class="search-input" 
                       placeholder="Search for movies, TV shows, genres..."
                       @bind="_searchQuery"
                       @bind:event="oninput"
                       @onkeyup="HandleKeyUp"
                       autofocus />
                @if (!string.IsNullOrEmpty(_searchQuery))
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Clear" 
                                   Size="Size.Small" 
                                   Class="clear-button"
                                   OnClick="ClearSearch" />
                }
            </div>
            
            @if (_showFilters)
            {
                <div class="search-filters">
                    <MudChip T="PlexRequestsHosted.Shared.Enums.MediaType?"
                             Variant="@(_filterType == null ? Variant.Filled : Variant.Outlined)"
                             OnClick="() => SetTypeFilter(null)">
                        All
                    </MudChip>
                    <MudChip T="PlexRequestsHosted.Shared.Enums.MediaType?"
                             Variant="@(_filterType == PlexRequestsHosted.Shared.Enums.MediaType.Movie ? Variant.Filled : Variant.Outlined)"
                             OnClick="() => SetTypeFilter(PlexRequestsHosted.Shared.Enums.MediaType.Movie)">
                        Movies
                    </MudChip>
                    <MudChip T="PlexRequestsHosted.Shared.Enums.MediaType?"
                             Variant="@(_filterType == PlexRequestsHosted.Shared.Enums.MediaType.TvShow ? Variant.Filled : Variant.Outlined)"
                             OnClick="() => SetTypeFilter(PlexRequestsHosted.Shared.Enums.MediaType.TvShow)">
                        TV Shows
                    </MudChip>
                </div>
            }
        </MudContainer>
    </div>

    <div class="search-content">
        <MudContainer MaxWidth="MaxWidth.Large">
            @if (string.IsNullOrEmpty(_searchQuery))
            {
                <!-- Popular Searches / Suggestions -->
                <div class="suggestions-section">
                    <h2>Popular Searches</h2>
                    <div class="suggestion-grid">
                        @foreach (String suggestion in _popularSearches)
                        {
                            <button class="suggestion-tile" @onclick="() => SearchFor(suggestion)">
                                <span>@suggestion</span>
                                <MudIcon Icon="@Icons.Material.Filled.TrendingUp" />
                            </button>
                        }
                    </div>
                    
                    <h2>Browse by Genre</h2>
                    <div class="genre-grid">
                        @foreach (String genre in _genres)
                        {
                            <button class="genre-tile" @onclick="() => BrowseGenre(genre)">
                                @genre
                            </button>
                        }
                    </div>
                </div>
            }
            else if (_isSearching)
            {
                <!-- Loading State -->
                <div class="search-loading">
                    <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
                    <MudText Typo="Typo.body1">Searching...</MudText>
                </div>
            }
            else if (_searchResults?.Any() == true)
            {
                <!-- Search Results -->
                <div class="results-header">
                    <h2>Results for "@_searchQuery"</h2>
                    <MudText Typo="Typo.body2" Color="Color.Tertiary">
                        @_searchResults.Count results found
                    </MudText>
                </div>
                
                <div class="results-grid">
                    @foreach (PlexRequestsHosted.Shared.DTOs.MediaCardDto result in _searchResults)
                    {
                        <div class="result-item" @onclick="() => ShowDetails(result)">
                            <MediaTile Media="result"
                                      OnRequest="RequestMedia"
                                      OnPlay="PlayMedia" />
                        </div>
                    }
                </div>
            }
            else if (!string.IsNullOrEmpty(_searchQuery))
            {
                <!-- No Results -->
                <div class="no-results">
                    <MudIcon Icon="@Icons.Material.Filled.SearchOff" Style="font-size: 4rem;" />
                    <h2>No results found for "@_searchQuery"</h2>
                    <MudText Typo="Typo.body1" Color="Color.Tertiary">
                        Try different keywords or browse our categories
                    </MudText>
                    <div class="no-results-suggestions">
                        <MudText Typo="Typo.h6">You might like:</MudText>
                        <div class="suggestion-chips">
                            @foreach (String suggestion in _alternativeSuggestions)
                            {
                                <MudChip T="string" OnClick="() => SearchFor(suggestion)">@suggestion</MudChip>
                            }
                        </div>
                    </div>
                </div>
            }
        </MudContainer>
    </div>
</div>

@code {
    private String _searchQuery = "";
    private List<PlexRequestsHosted.Shared.DTOs.MediaCardDto>? _searchResults;
    private PlexRequestsHosted.Shared.Enums.MediaType? _filterType;
    private Boolean _isSearching = false;
    private Boolean _showFilters = false;
    private System.Timers.Timer? _debounceTimer;

    private List<String> _popularSearches = new()
    {
        "Action Movies", "Comedy Shows", "New Releases", "Top Rated",
        "Marvel", "Star Wars", "Horror", "Documentary"
    };

    private List<String> _genres = new()
    {
        "Action", "Adventure", "Animation", "Comedy", "Crime", "Documentary",
        "Drama", "Family", "Fantasy", "Horror", "Mystery", "Romance",
        "Sci-Fi", "Thriller", "War", "Western"
    };

    private List<String> _alternativeSuggestions = new()
    {
        "Trending Now", "Popular Movies", "Award Winners", "Classic Films"
    };

    protected override async Task OnInitializedAsync()
    {
        // Load initial trending/popular content
        LoadPopularContent();
    }

    private void LoadPopularContent()
    {
        // This would load popular/trending content for the empty search state
    }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        _debounceTimer?.Stop();
        _debounceTimer = new System.Timers.Timer(300);
        _debounceTimer.Elapsed += async (sender, args) =>
        {
            await InvokeAsync(async () =>
            {
                await PerformSearch();
            });
            _debounceTimer?.Stop();
        };
        _debounceTimer.Start();
        
        _showFilters = !string.IsNullOrEmpty(_searchQuery);
    }

    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(_searchQuery))
        {
            _searchResults = null;
            StateHasChanged();
            return;
        }

        _isSearching = true;
        StateHasChanged();

        try
        {
            _searchResults = await PlexApiService.SearchMediaAsync(_searchQuery, _filterType);
            
            // Apply additional filtering if needed
            if (_filterType.HasValue)
            {
                _searchResults = _searchResults?.Where(r => r.MediaType == _filterType.Value).ToList();
            }
        }
        finally
        {
            _isSearching = false;
            StateHasChanged();
        }
    }

    private void SearchFor(String query)
    {
        _searchQuery = query;
        _ = PerformSearch();
    }

    private void BrowseGenre(String genre)
    {
        Navigation.NavigateTo($"/browse?genre={genre}");
    }

    private void ClearSearch()
    {
        _searchQuery = "";
        _searchResults = null;
        _showFilters = false;
    }

    private void SetTypeFilter(PlexRequestsHosted.Shared.Enums.MediaType? type)
    {
        _filterType = type;
        _ = PerformSearch();
    }

    private void ShowDetails(PlexRequestsHosted.Shared.DTOs.MediaCardDto media)
    {
        Navigation.NavigateTo($"/media/{media.MediaType.ToString().ToLower()}/{media.Id}");
    }

    private async Task RequestMedia(PlexRequestsHosted.Shared.DTOs.MediaCardDto media)
    {
        PlexRequestsHosted.Shared.DTOs.MediaRequestResult result = await MediaRequestService.RequestMediaAsync(media.Id, media.MediaType);
        if (result.Success)
        {
            media.RequestStatus = PlexRequestsHosted.Shared.Enums.RequestStatus.Pending;
            await ToastService.ShowSuccessAsync($"{media.Title} has been requested!");
        }
    }

    private void PlayMedia(PlexRequestsHosted.Shared.DTOs.MediaCardDto media)
    {
        if (!string.IsNullOrEmpty(media.PlexUrl))
            Navigation.NavigateTo(media.PlexUrl, true);
    }

    public void Dispose()
    {
        _debounceTimer?.Dispose();
    }
}
