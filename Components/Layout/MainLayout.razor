@inherits LayoutComponentBase
@inject PlexRequestsHosted.Services.Abstractions.IThemeService ThemeService
@inject NavigationManager Navigation
@inject PlexRequestsHosted.Services.Abstractions.IAuthService AuthService
@implements IDisposable

    
    <div class="app-container">
    @if (!_isLoginPage)
    {
    <header class="app-header @(_isHomepage && !_scrolled ? "transparent" : "") @(_scrolled ? "scrolled" : "")" @onscroll="HandleScroll">
        <div class="header-content">
            <div class="header-left">
                <a href="/browse" class="brand-logo">
                    <MudText Typo="Typo.h5" Class="brand-text">PLEX REQUEST</MudText>
                </a>
                <nav class="main-nav desktop-only">
                    <NavLink href="/browse/movie" class="nav-item">Movies</NavLink>
                    <NavLink href="/browse/tvshow" class="nav-item">TV Shows</NavLink>
                    <NavLink href="/requests" class="nav-item">My Requests</NavLink>
                    <NavLink href="/watchlist" class="nav-item">My List</NavLink>
                </nav>
            </div>
            
            <div class="header-right">
                <div class="search-container desktop-only @(_searchOpen ? "open" : "")">
                    <MudIconButton Icon="@Icons.Material.Filled.Search" Color="Color.Inherit" OnClick="ToggleSearch" />
                    @if (_searchOpen)
                    {
                        <input type="text" class="search-input" placeholder="Titles, genres, people" @onblur="CloseSearch" @onkeydown="HandleSearchKeyDown" @bind-value="_searchQuery" />
                    }
                </div>
                
                <MudIconButton Icon="@Icons.Material.Filled.Notifications"
                               Color="Color.Inherit"
                               Class="desktop-only notification-btn"
                               BadgeColor="Color.Error"
                               BadgeText="@(_notificationCount > 0 ? _notificationCount.ToString() : null)">
                    <MudMenu AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                        <ActivatorContent>
                            <MudIconButton Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit" />
                        </ActivatorContent>
                        <ChildContent>
                            @if (_notifications.Any())
                            {
                                @foreach (var notification in _notifications)
                                {
                                    <MudMenuItem>
                                        <div class="notification-item">
                                            <MudText Typo="Typo.body2">@notification.Message</MudText>
                                            <MudText Typo="Typo.caption" Class="text-secondary">@notification.Time.ToString("HH:mm")</MudText>
                                        </div>
                                    </MudMenuItem>
                                }
                                <MudDivider />
                                <MudMenuItem OnClick="ClearNotifications">Clear All</MudMenuItem>
                            }
                            else
                            {
                                <MudMenuItem Disabled="true">No new notifications</MudMenuItem>
                            }
                        </ChildContent>
                    </MudMenu>
                </MudIconButton>
                
                <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                    <ActivatorContent>
                        <MudAvatar Size="Size.Small" Class="user-avatar">
                            <MudImage Src="@(_userAvatar ?? "/default-avatar.svg")" />
                        </MudAvatar>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem Href="/profile">Profile</MudMenuItem>
                        <MudMenuItem Href="/settings">Settings</MudMenuItem>
                        <MudDivider />
                        <MudMenuItem OnClick="SignOut">Sign Out</MudMenuItem>
                    </ChildContent>
                </MudMenu>
                
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Class="mobile-only" OnClick="ToggleMobileMenu" />
            </div>
        </div>
    </header>
    }

    @if (_mobileMenuOpen && !_isLoginPage)
    {
        <div class="mobile-menu">
            <nav class="mobile-nav">
                <NavLink href="/browse/movie" class="mobile-nav-item" @onclick="CloseMobileMenu">Movies</NavLink>
                <NavLink href="/browse/tvshow" class="mobile-nav-item" @onclick="CloseMobileMenu">TV Shows</NavLink>
                <NavLink href="/requests" class="mobile-nav-item" @onclick="CloseMobileMenu">My Requests</NavLink>
                <NavLink href="/watchlist" class="mobile-nav-item" @onclick="CloseMobileMenu">My List</NavLink>
                <NavLink href="/search" class="mobile-nav-item" @onclick="CloseMobileMenu">Search</NavLink>
                <MudDivider Class="my-3" />
                <NavLink href="/profile" class="mobile-nav-item" @onclick="CloseMobileMenu">Profile</NavLink>
                <NavLink href="/settings" class="mobile-nav-item" @onclick="CloseMobileMenu">Settings</NavLink>
            </nav>
        </div>
    }

    <main class="main-content">
        <ErrorBoundary>
            <ChildContent>
                @Body
            </ChildContent>
            <ErrorContent>
                <MudContainer MaxWidth="MaxWidth.Large" Class="py-8">
                    <MudAlert Severity="Severity.Error">
                        Something went wrong. Please refresh the page or try again later.
                    </MudAlert>
                </MudContainer>
            </ErrorContent>
        </ErrorBoundary>
    </main>

    @if (!_isLoginPage)
    {
        <footer class="app-footer">
            <MudContainer MaxWidth="MaxWidth.Large">
                <div class="footer-content">
                    <div class="footer-links">
                        <a href="/about">About</a>
                        <a href="/help">Help Center</a>
                        <a href="/terms">Terms of Service</a>
                        <a href="/privacy">Privacy</a>
                    </div>
                    <MudText Typo="Typo.caption" Class="footer-copyright">
                        @DateTime.Now.Year Plex Request. All rights reserved.
                    </MudText>
                </div>
            </MudContainer>
        </footer>
    }
</div>



@code {
    private bool _scrolled = false;
    private bool _searchOpen = false;
    private bool _mobileMenuOpen = false;
    private bool _isHomepage = false;
    private bool _isLoginPage = false;
    private System.Timers.Timer? _scrollTimer;
    private string? _userAvatar;
    private string _searchQuery = string.Empty;
    private int _notificationCount = 0;
    private List<NotificationItem> _notifications = new();

    private class NotificationItem
    {
        public string Message { get; set; } = string.Empty;
        public DateTime Time { get; set; }
        public NotificationType Type { get; set; }
    }

    private enum NotificationType
    {
        Info,
        Success,
        Warning,
        Error
    }

    protected override void OnInitialized()
    {
        _scrollTimer = new System.Timers.Timer(100);
        _scrollTimer.Elapsed += CheckScroll;
        _scrollTimer.Start();

        DetermineRouteContext();
        Navigation.LocationChanged += HandleLocationChanged;

        _notificationCount = _notifications.Count;
    }

    private void CheckScroll(object? sender, System.Timers.ElapsedEventArgs e)
    {
        // This would need JS interop to get actual scroll position
        // For now, we'll simulate scroll behavior
    }

    private void HandleScroll()
    {
        // Handle scroll to add background to header
        _scrolled = true;
    }

    private void ToggleSearch()
    {
        _searchOpen = !_searchOpen;
    }

    private void CloseSearch()
    {
        _searchOpen = false;
        _searchQuery = string.Empty;
    }

    private void HandleSearchKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(_searchQuery))
        {
            Navigation.NavigateTo($"/search?q={Uri.EscapeDataString(_searchQuery)}");
            CloseSearch();
        }
        else if (e.Key == "Escape")
        {
            CloseSearch();
        }
    }

    private void ToggleMobileMenu()
    {
        _mobileMenuOpen = !_mobileMenuOpen;
    }

    private void CloseMobileMenu()
    {
        _mobileMenuOpen = false;
    }

    private async Task SignOut()
    {
        await AuthService.SignOutAsync();
        Navigation.NavigateTo("/", true);
    }

    private void ClearNotifications()
    {
        _notifications.Clear();
        _notificationCount = 0;
        StateHasChanged();
    }

    public void Dispose()
    {
        _scrollTimer?.Dispose();
        Navigation.LocationChanged -= HandleLocationChanged;
    }

    protected override void OnParametersSet()
    {
        DetermineRouteContext();
    }

    private void HandleLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        DetermineRouteContext();
        InvokeAsync(StateHasChanged);
    }

    private void DetermineRouteContext()
    {
        var uri = Navigation.Uri;
        _isHomepage = uri.EndsWith("/browse") || uri.EndsWith("/dashboard");
        _isLoginPage = uri.EndsWith("/login") || uri.EndsWith("/") || uri.Contains("/auth/callback");
    }
}
