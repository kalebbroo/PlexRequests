@inherits LayoutComponentBase
@inject PlexRequestsHosted.Services.Abstractions.IThemeService ThemeService
@inject NavigationManager Navigation
@inject PlexRequestsHosted.Services.Abstractions.IAuthService AuthService
@implements IDisposable

<CascadingAuthenticationState>
    <div class="app-container">
    <header class="app-header @(_scrolled ? "scrolled" : "")" @onscroll="HandleScroll">
        <div class="header-content">
            <div class="header-left">
                <a href="/" class="brand-logo">
                    <MudText Typo="Typo.h5" Class="brand-text">PLEX REQUEST</MudText>
                </a>
                <nav class="main-nav desktop-only">
                    <NavLink href="/" Match="NavLinkMatch.All" class="nav-item">Home</NavLink>
                    <NavLink href="/browse/movie" class="nav-item">Movies</NavLink>
                    <NavLink href="/browse/tvshow" class="nav-item">TV Shows</NavLink>
                    <NavLink href="/requests" class="nav-item">My Requests</NavLink>
                    <NavLink href="/watchlist" class="nav-item">My List</NavLink>
                </nav>
            </div>
            
            <div class="header-right">
                <div class="search-container desktop-only">
                    <MudIconButton Icon="@Icons.Material.Filled.Search" Color="Color.Inherit" OnClick="ToggleSearch" />
                    @if (_searchOpen)
                    {
                        <input type="text" class="search-input" placeholder="Titles, genres, people" @onblur="CloseSearch" />
                    }
                </div>
                
                <MudIconButton Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit" Class="desktop-only" />
                
                <AuthorizeView>
                    <Authorized>
                        <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                            <ActivatorContent>
                                <MudAvatar Size="Size.Small" Class="user-avatar">
                                    <MudImage Src="@(_userAvatar ?? "/default-avatar.png")" />
                                </MudAvatar>
                            </ActivatorContent>
                            <ChildContent>
                                <MudMenuItem Href="/profile">Profile</MudMenuItem>
                                <MudMenuItem Href="/settings">Settings</MudMenuItem>
                                <MudDivider />
                                <MudMenuItem OnClick="SignOut">Sign Out</MudMenuItem>
                            </ChildContent>
                        </MudMenu>
                    </Authorized>
                    <NotAuthorized>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/login" Size="Size.Small">Sign In</MudButton>
                    </NotAuthorized>
                </AuthorizeView>
                
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Class="mobile-only" OnClick="ToggleMobileMenu" />
            </div>
        </div>
    </header>

    @if (_mobileMenuOpen)
    {
        <div class="mobile-menu">
            <nav class="mobile-nav">
                <NavLink href="/" Match="NavLinkMatch.All" class="mobile-nav-item" @onclick="CloseMobileMenu">Home</NavLink>
                <NavLink href="/browse/movie" class="mobile-nav-item" @onclick="CloseMobileMenu">Movies</NavLink>
                <NavLink href="/browse/tvshow" class="mobile-nav-item" @onclick="CloseMobileMenu">TV Shows</NavLink>
                <NavLink href="/requests" class="mobile-nav-item" @onclick="CloseMobileMenu">My Requests</NavLink>
                <NavLink href="/watchlist" class="mobile-nav-item" @onclick="CloseMobileMenu">My List</NavLink>
                <NavLink href="/search" class="mobile-nav-item" @onclick="CloseMobileMenu">Search</NavLink>
                <MudDivider Class="my-3" />
                <NavLink href="/profile" class="mobile-nav-item" @onclick="CloseMobileMenu">Profile</NavLink>
                <NavLink href="/settings" class="mobile-nav-item" @onclick="CloseMobileMenu">Settings</NavLink>
            </nav>
        </div>
    }

    <main class="main-content">
        <ErrorBoundary>
            <ChildContent>
                @Body
            </ChildContent>
            <ErrorContent>
                <MudContainer MaxWidth="MaxWidth.Large" Class="py-8">
                    <MudAlert Severity="Severity.Error">
                        Something went wrong. Please refresh the page or try again later.
                    </MudAlert>
                </MudContainer>
            </ErrorContent>
        </ErrorBoundary>
    </main>

    <footer class="app-footer">
        <MudContainer MaxWidth="MaxWidth.Large">
            <div class="footer-content">
                <div class="footer-links">
                    <a href="/about">About</a>
                    <a href="/help">Help Center</a>
                    <a href="/terms">Terms of Service</a>
                    <a href="/privacy">Privacy</a>
                </div>
                <MudText Typo="Typo.caption" Class="footer-copyright">
                    @DateTime.Now.Year Plex Request. All rights reserved.
                </MudText>
            </div>
        </MudContainer>
    </footer>
</div>

</CascadingAuthenticationState>

@code {
    private bool _scrolled = false;
    private bool _searchOpen = false;
    private bool _mobileMenuOpen = false;
    private System.Timers.Timer? _scrollTimer;
    private string? _userAvatar;

    protected override void OnInitialized()
    {
        _scrollTimer = new System.Timers.Timer(100);
        _scrollTimer.Elapsed += CheckScroll;
        _scrollTimer.Start();
    }

    private void CheckScroll(object? sender, System.Timers.ElapsedEventArgs e)
    {
        // This would need JS interop to get actual scroll position
        // For now, we'll simulate scroll behavior
    }

    private void HandleScroll()
    {
        // Handle scroll to add background to header
        _scrolled = true;
    }

    private void ToggleSearch()
    {
        _searchOpen = !_searchOpen;
    }

    private void CloseSearch()
    {
        _searchOpen = false;
    }

    private void ToggleMobileMenu()
    {
        _mobileMenuOpen = !_mobileMenuOpen;
    }

    private void CloseMobileMenu()
    {
        _mobileMenuOpen = false;
    }

    private async Task SignOut()
    {
        await AuthService.SignOutAsync();
        Navigation.NavigateTo("/", true);
    }

    public void Dispose()
    {
        _scrollTimer?.Dispose();
    }
}
